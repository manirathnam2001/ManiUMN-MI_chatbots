"""
Box integration configuration for PDF storage.
"""

import os
from typing import Optional

# Box upload email configuration
BOX_UPLOAD_EMAIL = "App_upl.yqz3brxlhcurhp2l@u.box.com"

# SMTP Configuration - can be overridden via environment variables
SMTP_HOST = os.environ.get("SMTP_HOST", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_USE_TLS = os.environ.get("SMTP_USE_TLS", "True").lower() == "true"

# Email sender configuration
SMTP_USERNAME = os.environ.get("SMTP_USERNAME", "")
SMTP_PASSWORD = os.environ.get("SMTP_PASSWORD", "")
SENDER_EMAIL = os.environ.get("SENDER_EMAIL", SMTP_USERNAME)

# Retry configuration
MAX_RETRY_ATTEMPTS = int(os.environ.get("BOX_MAX_RETRY_ATTEMPTS", "3"))
RETRY_DELAY_SECONDS = int(os.environ.get("BOX_RETRY_DELAY_SECONDS", "2"))
RETRY_BACKOFF_MULTIPLIER = float(os.environ.get("BOX_RETRY_BACKOFF_MULTIPLIER", "2.0"))

# Email configuration
DEFAULT_EMAIL_SUBJECT = "MI Assessment PDF Report"
DEFAULT_EMAIL_BODY = """Attached is the MI Assessment PDF Report.

This file has been automatically uploaded to Box.

Generated by MI Chatbots Assessment System.
"""


class BoxConfig:
    """Configuration class for Box integration settings."""
    
    def __init__(
        self,
        box_email: Optional[str] = None,
        smtp_host: Optional[str] = None,
        smtp_port: Optional[int] = None,
        smtp_username: Optional[str] = None,
        smtp_password: Optional[str] = None,
        sender_email: Optional[str] = None,
        max_retry_attempts: Optional[int] = None,
        retry_delay: Optional[int] = None,
        retry_backoff: Optional[float] = None
    ):
        """
        Initialize Box configuration with optional overrides.
        
        Args:
            box_email: Box upload email address
            smtp_host: SMTP server hostname
            smtp_port: SMTP server port
            smtp_username: SMTP username for authentication
            smtp_password: SMTP password for authentication
            sender_email: Sender email address
            max_retry_attempts: Maximum number of retry attempts
            retry_delay: Initial retry delay in seconds
            retry_backoff: Backoff multiplier for retry delays
        """
        self.box_email = box_email or BOX_UPLOAD_EMAIL
        self.smtp_host = smtp_host or SMTP_HOST
        self.smtp_port = smtp_port or SMTP_PORT
        self.smtp_username = smtp_username or SMTP_USERNAME
        self.smtp_password = smtp_password or SMTP_PASSWORD
        self.sender_email = sender_email or SENDER_EMAIL or self.smtp_username
        self.max_retry_attempts = max_retry_attempts or MAX_RETRY_ATTEMPTS
        self.retry_delay = retry_delay or RETRY_DELAY_SECONDS
        self.retry_backoff = retry_backoff or RETRY_BACKOFF_MULTIPLIER
        self.use_tls = SMTP_USE_TLS
    
    def is_configured(self) -> bool:
        """
        Check if the Box integration is properly configured.
        
        Returns:
            bool: True if all required settings are configured
        """
        return bool(
            self.box_email and
            self.smtp_host and
            self.smtp_username and
            self.smtp_password and
            self.sender_email
        )
    
    def get_missing_settings(self) -> list:
        """
        Get list of missing required settings.
        
        Returns:
            list: List of missing setting names
        """
        missing = []
        if not self.box_email:
            missing.append("box_email")
        if not self.smtp_host:
            missing.append("smtp_host")
        if not self.smtp_username:
            missing.append("smtp_username")
        if not self.smtp_password:
            missing.append("smtp_password")
        if not self.sender_email:
            missing.append("sender_email")
        return missing
    
    def __repr__(self):
        """Return string representation (hiding sensitive data)."""
        return (
            f"BoxConfig("
            f"box_email='{self.box_email}', "
            f"smtp_host='{self.smtp_host}', "
            f"smtp_port={self.smtp_port}, "
            f"sender_email='{self.sender_email}', "
            f"max_retry_attempts={self.max_retry_attempts}, "
            f"retry_delay={self.retry_delay}s"
            f")"
        )
